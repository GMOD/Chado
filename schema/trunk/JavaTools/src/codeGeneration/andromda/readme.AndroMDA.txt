
    
    A n d r o M D A  -  3.1


    AndroMDA is an open-source MDA framework distributed under the BSD license.
    Go to http://www.andromda.org/ for more information.

    The project located in this directory has been generated by Cyril Pommier
    using the andromdapp:generate Maven plugin.

    You should at least be running Maven 1.0.2 if you want to build your
    project without any Maven-related problems, below is a summary of what has
    been generated and a list of example goals to call from the command line.

    The generated project structure is well-tailored for use in the development
    of J2EE projects. The build process itself makes use of Maven, dependencies
    and often-used goals have been added for your convenience.

    Custom configuration can be done by updating the project.properties files

    /Chado J2EE project
         |
         |    The root of the project contains a few files that control the overall
         |    build process and common properties
         |
         |-- project.xml
         |        contains information about this project, you may add more information
         |        as long as you do not violate the Maven POM schema, see
         |        http://maven.apache.org/reference/project-descriptor.html
         |-- maven.xml
         |        this file defines the goals that can be called from the root of the
         |        project, most of the time just calling goals in submodules, see below
         |        for examples
         |-- project.properties
         |        common properties that might be changed to configure the project
         |-- build.properties
         |        properties related to versions of external dependencies such as
         |        libraries, also defines project identifier properties; usually
         |        this file is not edited (except perhaps when upgrading to
         |        another AndroMDA version)
         |
         +-- /mda
         |     |
         |     |    The MDA module is the heart of this project, this is where
         |     |    AndroMDA is configured to generate the files needed to
         |     |    assemble the application
         |     |
         |     +-- project.xml
         |     |        contains the AndroMDA dependencies
         |     +-- project.properties
         |     |        specific AndroMDA properties, can be configured here,
         |     |        such as toggling the validation errors on/off
         |     +-- maven.xml
         |     |        no need to edit this file
         |     +-- /src
         |     |        additional sources such as merge-mappings can be
         |     |        placed here, check out the /uml directory, it contains
         |     |        the UML model from which AndroMDA will generate code
         |     +-- /conf/andromda.xml
         |              configures AndroMDA and its components, most
         |              importantly the cartridges which are listed in
         |              their own namespace; global settings are done in the
         |              'default' namespace
         |     
         +-- /common
         |     |
         |     |    The COMMON module collects those resources and classes
         |     |    that are shared between the other modules.
         |     |
         |     +-- project.xml
         |     |        lists common dependencies
         |     +-- /target
         |              shared resources and java classes are generated here,
         |              such as value objects and exceptions
         |
         +-- /core
         |     |
         |     |    The CORE module collects those resources and classes
         |     |    that use the Spring framework, optionally making
         |     |    use of Hibernate and/or EJB under the hood.
         |     |
         |     +-- project.xml
         |     |        lists Spring dependencies
         |     +-- project.properties
         |     |        specific Spring build properties,
         |     |        no need to edit these
         |     +-- maven.xml
         |     |        defines goals for the generation of the database
         |     |        specific DDL code for the creation/deletion of the
         |     |        schema (using Hibernate's SchemaExport)
         |     +-- /src
         |     |        Spring classes that need manual implementation are
         |     |        generated here, they will not be overwritten upon
         |     |        regeneration; this includes the service, DAO and
         |     |        entity implementations
         |     +-- /target
         |              the Spring resources and classes here will be
         |              overwriten each time AndroMDA generates new code
         |              using the Spring cartridge; this includes both
         |              the Hibernate entities and the correponding
         |              *.hbm.xml mapping files as well as the service
         |              and DAO base classes. You'll also find the DDL 
         |              for creating and dropping your schema within this 
         |              directory.
         |
         +-- /web
         |     |
         |     |    The WEB module collects all resources and classes
         |     |    that make up the presentation layer, as well as 
         |     |    bundling all other modules to create a deployable war.
         |     |
         |     +-- project.xml
         |     |        lists WebApp dependencies
         |     +-- project.properties
         |     |        specific Spring build properties,
         |     |        you can set precompileJsps=true to enable the
         |     |        automatic precompilation of JSPs
         |     +-- maven.xml
         |     |        defines specific goals related to JSP precompilation,
         |     |        uncomment the war:init preGoal to enable the copy-over
         |     |        feature
         |     +-- /src
         |     |        controller implementations and editable resource bundles
         |     |        will be generated here,
         |     |        you might consider putting your own JSPs here to
         |     |        be copied over the generated ones when bundling the
         |     |        .war file
         |     +-- /target
         |              a deployable war is bundled here
         |



    In order to succesfully build your project you will need to know
    how to invoke the build process for the existing modules, here's a
    list of examples:

        %> maven install

            simply builds all modules

        %> maven deploy

            collects all artifacts and builds a deployable .war which is then
            deployed, you will need to have built the other modules before

        %> maven clean install deploy

            deletes all generated files, rebuilds and deploys; files in /src
            directories are *not* deleted

        %> maven core

            only build the core module

        %> maven web

            only build the web module

        %> maven nuke

            cleans out all /target directories and removes all Java classes with names
            ending with 'Impl' from the source directories (from the common, core and
            web modules); this goal asks for confirmation, but be careful calling it
            anyway as you will lose your manually edited files

        %> maven create-schema

            invokes the generated DDL code and subsequently tells the database
            to create the schema for the entities

        %> maven drop-schema

            invokes the generated DDL code and subsequently tells the database
            to drop the schema for the entities

        %> maven start-andromda-server

            starts the AndroMDA server, with this server running you will be able
            to significantly speedup the generation process although it will require
            you to use another console while it is running

        %> maven stop-andromda-server

            stops the AndroMDA server

        %> maven mda

            runs AndroMDA on your model and thereby generating files in
            the subdirectories of the existing modules

        %> maven mda -Dfilter=java,hibernate

            runs AndroMDA, but this time only using the Java and Hibernate
            cartridges (in that order)

        %> maven mda -Dfilter=~java,hibernate

            runs AndroMDA, but this time using all cartridges *except*
            the Java and Hibernate cartridges

        %> maven mda -Dfilter=java core web deploy

            runs AndroMDA using only the Java cartridge, rebuilds the core
            module and then the web module and deploys afterwards


    Please note that you may use the '-o' flag at any time to avoid
    having Maven download the dependencies, only build online when Maven
    complains about missing dependencies.

    Each module will install its artifact into the local Maven repository,
    this might be a directory looking like this:

        (Windows)
        C:\Documents and Settings\Cyril Pommier\.maven\repository\chado\

        (*nix)
        /home/Cyril Pommier/.maven/repository/chado/

    For questions or feature requests please use our forum:
    http://forum.andromda.org/


    Good luck!


        -- The AndroMDA Team


