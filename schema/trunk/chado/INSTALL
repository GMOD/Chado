                            CHADO INSTALLATION

$Id: INSTALL,v 1.14 2004-02-13 21:07:26 scottcain Exp $

This document describes the procedure for installing the chado 
schema and loading data from GenBank data records.  This is currently
considered alpha software, so expect there to be bumps in the road.  When
you experience problems, please email them to the gmod-devel mailing list
at gmod-devel@lists.sourceforge.net.  Also packaged with this release is
version 1.58 of the Generic Genome Browser (gbrowse) which has adaptors
to work with chado.  The installation instructions for gbrowse are included
in that package.  There are plans to make the installation of gbrowse and
other components more automatic, but for the time being, please unpack it 
and install separately.

Thanks,
Scott Cain
cain@cshl.org

Prerequisites:

  PostgreSQL (currently, developers are using 7.3.2, but should transition to
  7.4 soon). Items to do with postgres to make it ready to go:

    * make it accept tcp/ip connections by adding this line to postgresql.conf:
        tcpip_socket = true

    * create a database user with permission to drop and add databases:
        psql> CREATE USER <username> WITH CREATDB;

    * tell postgres that it can use the plpgsql language (either as user
      postgres or as the user created above):
        # /usr/bin/createlang plpgsql template1

  Apache (1.3.*)

  BioPerl (1.4 when available)
          (-microarray 0.1 --required for microarray data)

  Standard Perl modules:
    * CGI                      (GBrowse)
    * GD                       (GBrowse)
    * DBI                      (GBrowse,chado)
    * DBD::Pg                  (GBrowse,chado)
    * SQL::Translator (0.05 or cvs) (chado)
    * Digest::MD5              (GBrowse)
    * Text::Shellwords         (GBrowse)
    * Class::DBI               (chado)
    * Class::DBI::Pg           (chado)
    * Class::DBI::Pager        (chado)
    * XML::Simple              (chado)
    * XML::DOM                 (chado<->Apollo)
    * XML::Parser              (chado<->Apollo)
    * XML::Parser::PerlSAX     (chado<->Apollo)
    * LWP                      (chado)
    * Log::Log4perl            (chado)
    * Term::ProgressBar        (chado)
  

This document describes how to install the Chado schema:

1.  First, you must should set the following variables in your environment:

   * GMOD_ROOT: The location of your GMOD installation (e.g., "/usr/local/gmod")

   * CHADO_DB_NAME: The name of your Chado database

   * CHADO_DB_USERNAME: The username to connect to Chado

   * CHADO_DB_PASSWORD: The password for the database user [opt]

   * CHADO_DB_HOST: The host on which the database runs (e.g. "localhost") [opt]

   * CHADO_DB_PORT: The port on which the database is listening [opt]

As indicated, the host, port, and password are optional.

*   Note: a mechanism exists to pass these variables directly to the
    installer during the "perl Makefile.PL" step.  By giving key=value pairs,
    it is possible to avoid setting environmental variables.  The syntax is as:

       perl Makefile.PL GMOD_ROOT=/usr/local/gmod CHADO_DB_NAME=dev_chado_01

    Backward compatibility may not be maintained for this method of configuring
    the install process will work.  You have been warned.

2.  Next, run the following commands:

*   perl Makefile.PL   
    Creates AutoDBI.pm.

      During this step you are prompted for several configuration values
      used by Chado and its associated tools:

        *   What database server will you be using? [PostgreSQL] 

        Specify what database vendor to use.  Currently only PostgreSQL works.

        *   What is the Chado database name? [dev_chado_allenday_05] 

        This will be the name of the created chado database.

        *   What is the database username? [allenday] 

        Default user that the installed libraries should try to
        connect to the database as.

        *   What is the password for 'allenday'?  

        Password for the default user.

        *   What is the database host? [sumo.genetics.ucla.edu] 

        Host of the database daemon.

        *   What is your database port? [5432] 

        Port of the database daemon.

        *   Available extensions to the core schema:
            [1] sequence/gff-bridge/sequence-gff-views.sql
            [2] expression/rad.sql
            [3] expression/expression.sql


            What extensions to the core schema would you like?
            (Note that selecting any of these will force the
            rebuilding of Class::DBI classes.)
            (Comma-delimited)? [0] 

            Available function extensions to the core schema:
           [1] sequence/gff-bridge/sequence-gff-funcs.pgsql
           [2] sequence/functions/feature_subalignments.plpgsql

        !!!!!IMPORTANT!!!!!
        This section is where you choose optional extensions to the
        base Chado schema.

        If you plan to use Chado in combination with GBrowse, make
        sure you select (1) from both menus.

        If you plan to store many alignments with small regions of
        perfect match, you might want to load the alignment data
        as an alignment string rather than creating a feature for
        each aligned block.  Functionality exists for using this
        method in (2) of the function extentions, and is documented
        in README.H_sapiens.

        If you plan to represent gene expression data in a way that
        is compliant with MIAME standards, make sure you select (2) 
        and (3) from the core schema exentions
.
        !!!!!IMPORTANT!!!!!

        *   Enter the full path of an external DDL file [none] 

        Path to a file containing external SQL commands to execute
        after the database has been created.  This will typically be
        extra modules/views/tables not distributed with the core schema,
        or default data to insert into the database to fulfill the
        specialized needs of a MOD.

*   make
    Creates necessary files for the rest of the build process.

*   make load_schema
    Creates database, installs schema.  Note that it will wipe out
    any database with the same name in the process!

*   make prepdb
    Inserts a few useful items into fundamental Chado tables. It 
    uses load/etc/initialize.sql and when organism information is
    needed, it uses human as an example.  This file can be edited
    to use any organism.  Also note that if you did not select
    all of the optional exentions when you executed perl Makefile.PL
    you may get some errors at this stage and that is normal (they
    result from trying to insert data into tables that don't
    exist).

*   make ontologies
    Gets and installs various ontologies.  Requires a network 
    connection.  Note retrieved ontology files are stored
    in /tmp/chado_load/.  In order to do a repeat installation,
    lock files need to be removed to allow reinstallation of
    ontologies.  Those lock files are located in subdirectories
    of /tmp/chado_load and are suffixed with '_chado'.  For
    example, the Sequence Ontology lock files are located in
    /tmp/chado_load/song and are called so.definition_chado
    and so.ontology_chado.  Alternatively, deleting everything
    in /tmp/chado_load will force the re-downloading of the
    ontology data from their respective sources.  Also note that
    loading a large ontology like the Gene Ontology will take
    several minutes (perhaps as long as an hour).
    

*   make install
    Probably needs to be run as root.  Installs data loading scripts in
    /usr/local/bin and installs autogenerated perl database connection
    modules to perl lib directories.

*   gmod_load_gff3.pl --organism fruitfly \
                      --srcdb DB:genbank  \
                      --gfffile dat/AE003644.gbk.gff.bp

    (note that the '\' is included to allow cutting and pasting to a unix
    command line.)
    Loads GFF file.  Note that this command will fail unless you add 
    fruitfly to the organism table.  See `gmod_load_gff3.pl --help` for 
    details.  In summary, execute this command in the psql shell for the
    database:

      chado=# insert into organism (abbreviation, genus, species, common_name)
      chado-# values ('D.melanogaster','Drosophila','melanogaster','fruitfly');

    to add fruitfly to the organism table.  The loading script requires
    GFF3 as it has tighter control of the syntax and requires the use of a
    controlled vocabulary (SOFA), allowing mapping to the relational schema. 
    GFF3 files can be generated either from the included gmod_genbank2gff3.pl
    script:

        $ gmod_genbank2gff3.pl <genbank file> > <gff file>

    Note that is a redirect of standard out to a GFF file to collect the 
    results of the script.  GFF3 can also be generated via a script provided
    with bioperl 1.4, bp_genbank2gff.pl:

        $ bp_genbank2gff.pl --stdout --file <genbank file> > <gff file>

    Again note the redirection of standard out.  Note that neither of
    these methods for generating GFF3 files is completely satisfactory and
    development is ongoing to provide better translation.

*   install Generic-Genome-Browser.
    $ tar -zxvf Generic-Genome-Browser-1.58.tar.gz
    $ cd Generic-Genome-Browser-1.58.tar.gz
    and follow the instruction in the INSTALL documentation.
