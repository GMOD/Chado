                            CHADO INSTALLATION
 
$Id: INSTALL,v 1.51 2007-01-14 19:07:00 scottcain Exp $

This document describes the procedure for installing the chado 
schema and loading data from GFF3 data records.  This is currently
considered beta software, so expect there to be bumps in the road.  When
you experience problems, please email them to the gmod-schema mailing list
at gmod-schema@lists.sourceforge.net.  This release will work with the
most recent release of the Generic Genome Browser (gbrowse) version 1.66
If you experience difficulties with gbrowse and chado, you might want to
look at getting a cvs checkout of the gbrowse-session branch.  The
installation instructions for gbrowse are included in that package. 
There are plans to make the installation of gbrowse and other components
more automatic, but for the time being, please unpack it and install
separately.

This release of chado/gmod also comes with example functions for
allowing Apollo (http://www.gmod.org/apollo) to read and
write directly to the database, allowing creation and editing of
genome features as well as a sample database.  Please see the file
README.Apollo for some details on setting this up.

Thanks,
Scott Cain
cain@cshl.edu
January 2, 2007

Prerequisites:

  PostgreSQL; currently, developers are using 7.4 and 8.1. There are currently
  two main considerations in choosing what version of PostgreSQL to use:

    1. Version 8.1 is currently incompatible with the triggers that work
    with Apollo

    2. Version 7.4 is incompatible with the functions for making CMap
    integration more seamless.

  Neither problem is insurmountable; it is really a matter conconvience.

  Items to do with postgres to make it ready to go:

    * make it accept tcp/ip connections by adding this line to postgresql.conf
      (must be done either as user root or postgres; database must be restarted
      in order for this change to take affect):

        tcpip_socket = true

      (This option is not available and not needed in PostgreSQL 8.1.)

    * create a database user with permission to drop and add databases;
      the database user name should be the same as your unix user name to
      allow the software build to progress smoothly (must be done as user
      postgres; createuser is a commandline program that comes with the
      PostgreSQL package):
        
        # createuser --createdb <your username> 

    * tell postgres that it can use the plpgsql language (as user
      postgres; createlang is a commandline program that comes with
      the PostgreSQL package):

        # createlang plpgsql template1

    * edit the pg_hba.conf (either as the user 'root' or 'postgres') to give
      the user created above permission to access the database.  Read
      the comments in pg_hba.conf regarding permissions.  My pg_hba.conf looks
      like this (which is very loose permissions):

# TYPE  DATABASE    USER        IP-ADDRESS        IP-MASK           METHOD
                                                                                
local   all         all                                             trust
host    all         all         127.0.0.1         255.255.255.255   trust


    * for information on tuning postgres for performance, see

         http://www.varlena.com/varlena/GeneralBits/Tidbits/perf.html

      the two most critical parameters to tune are shared_buffers and
      effective_cache size.  Adjusting these parameters may require
      modification of memory settings in /etc/sysctl.conf, see the sysctl
      manpage for details.  Also critical for continued performance of
      postgres is the regular execution of the VACUUM FULL ANALYZE command.
      This command clears out old, deleted data and analyzes the structure
      of the database so that the execution planner can predict the
      fastest way to execute a given query.

      While the above link describes tuning in general, the examples given
      for tuning kernel parameters are Linux specific.  For setting 
      shmmax on Mac OS X boxes, edit 

          /System/Library/StartupItems/SystemTuning/SystemTuning (for OS X 10.2)
        
      or
 
          /etc/rc (for OS X 10.3)

      to increase the values of shmmax and shmall, like this:

          sysctl -w kern.sysv.shmmax=52428800 # bytes: 50 megs
          sysctl -w kern.sysv.shmmin=1
          sysctl -w kern.sysv.shmmni=32
          sysctl -w kern.sysv.shmseg=8
          sysctl -w kern.sysv.shmall=25600 # 4k pages: 100 megs

      (these are the values I use for my Mac that has 1.2 G RAM) and reboot.

      For my linux box with 512M RAM, I use these values in /etc/sysctl.conf:

         kernel.shmall = 134217728
         kernel.shmmax = 134217728

      and make these changes to the postgresql.conf file:

         tcpip_socket = true
         sort_mem=2048
         max_connections = 32


  Apache (1.3.* or 2.0.*) (gmod-web requires 2.0)

  BioPerl (bioperl-live or greater than 1.5.1)
          (-microarray 0.1 --required for microarray data)

  go-perl
      Get from http://archive.godatabase.org/latest-full/*utilities-src.tar.gz
      Be sure to set GO_ROOT as directed in the go-perl INSTALL doc.

  Standard Perl modules:
      The perl modules can be installed via the cpan shell and by issuing 
      the command 'install Bundle::GMOD' which will install all of the 
      modules below except for SQL::Translator, which is optional.

    * CGI                      (GBrowse)
    * GD                       (GBrowse)
    * DBI                      (GBrowse,chado)
    * DBD::Pg (1.49 or better) (GBrowse,chado)
    * SQL::Translator          (chado) (optional)
    * Digest::MD5              (GBrowse)
    * Text::Shellwords         (GBrowse)
    * Graph                    (Bio-Chaos)
    * Data::Stag               (chado)
    * XML::Parser::PerlSAX     (chado)
    * Module::Build            (chado)
    * Class::DBI               (GMODWeb, or with a custom Chado schema)
    * Class::DBI::Pg           (GMODWeb, or with a custom Chado schema)
    * Class::DBI::Pager        (GMODWeb, or with a custom Chado schema)
    * DBIx::DBStag             (chado)
    * XML::Simple              (chado)
    * LWP                      (chado)
    * Template                 (chado)
    * Log::Log4perl            (chado)
    * Term::ProgressBar (2.06 or better)  (chado)
  

This document describes how to install the Chado schema:

1.  First, you must should set the following variables in your environment.
    If you are using bash or a bash-like shell, this is done via a command
    like this:

       $ export VARNAME=value

    If you are using a csh-like shell, it is done like this:

       $ setenv VARNAME value

    To make life easier on yourself, you will probably want to put those
    commands in your .cshrc or .bashrc file so that the envirnment variables
    are always available when you log in. 

   * GMOD_ROOT: The location of your GMOD installation (e.g., "/usr/local/gmod")

   * CHADO_DB_NAME: The name of your Chado database

   * CHADO_DB_USERNAME: The username to connect to Chado

   * CHADO_DB_PASSWORD: The password for the database user [opt]

   * CHADO_DB_HOST: The host on which the database runs (e.g. "localhost") [opt]

   * CHADO_DB_PORT: The port on which the database is listening [opt]

As indicated, the host, port, and password are optional.

*   Note: a mechanism exists to pass these variables directly to the
    installer during the "perl Makefile.PL" step.  By giving key=value pairs,
    it is possible to avoid setting environmental variables.  The syntax is as:

       perl Makefile.PL GMOD_ROOT=/usr/local/gmod CHADO_DB_NAME=dev_chado_01

    Backward compatibility may not be maintained for this method of configuring
    the install process will work.  You have been warned.

2.  Next, run the following commands:

*   perl Makefile.PL   

      During this step you are prompted for several configuration values
      used by Chado and its associated tools:

        *   Use the simple install (uses default database schema) [Y]

        Answering yes skips questions about what exensions to use, and
        eliminates the need to have SQL::Translator installed.  This
        is recomended, and that is all that is necessary in order to use
        the full schema and run GBrowse and gmod-web on top of it.

        *   Use values in '/home/scott/gmod/build.conf'? [Y]

        If `perl Makefile.PL` has been run before, answering yes to this
        will cause Makefile.PL to use the configuration options from the
        previous build.

        *   What database server will you be using? [PostgreSQL] 

        Specify what database vendor to use.  Currently only PostgreSQL works.

        *   What is the Chado database name? [dev_chado_allenday_05] 

        This will be the name of the created chado database.

        *   What is the database username? [allenday] 

        Default user that the installed libraries should try to
        connect to the database as.

        *   What is the password for 'allenday'?  

        Password for the default user.

        *   What is the database host? [localhost] 

        Host of the database daemon.

        *   What is your database port? [5432] 

        Port of the database daemon.

        *   Where shall downloaded ontologies go? [./tmp]

        The directory where ontology files and there lock files will be stored

        *   What is the default organism (common name, or "none")?

        The organism name should be one what will be in the organism table.
        When the database is created, several organisms will be there
        by default; these include: human, fruitfly, mouse, mosquito,
        rat, mustard weed, worm, zebrafish, rice, and yeast.  (The
        insert statements that create these default organisms are 
        contained in load/etc/initialize.sql).

        If you answered 'No' to the simple install question, AutoDBI.pm
        will now be created by SQL::Translator, see the CUSTOM DATABASE
        SCHEMAS section below for more information.

*   make
    Creates necessary files for the rest of the build process.


*   (sudo) make install
    Probably needs to be run as root.  Installs data loading scripts
    in perl's path (typically /usr/local/bin or /usr/bin), perl modules,
    as well as placing various files in $GMOD_ROOT, and creating the
    infastructure for logging of errors by creating $GMOD_ROOT/logs and
    creating the file /etc/log4perl.conf if it does not already exist.


*   make load_schema
    Creates database, installs schema.  Note that it will wipe out
    any database with the same name in the process!


*   make prepdb
    Inserts a few useful items into fundamental Chado tables. It 
    uses load/etc/initialize.sql.  It contains information for several
    common organisms and source databases (eg, genbank). This file
    can be edited to add any organism or source database, using the
    INSERT statements for the examples as a template.  Note also that
    the prepdb target needs to be executed before the ontologies target,
    but it can be executed again later, if more insert statements are
    added (for instance to add a new organism or database).


*   make ontologies
    Gets and installs various ontologies.  Requires a network 
    connection.  Absolutely required are the Relationship Ontology and
    the Sequence Ontology (SO).  All others are optional.  Note retrieved
    ontology files are stored in the directory specified when
    perl Makefile.PL was run (the default is ./tmp).  In order to do a
    repeat installation, the directory containing the downloaded
    ontology must be removed.  In addition to 'rm -rf ./tmp', you can
    also issue the `make clean` command, which will clear out all
    of the files and directories created up until this point in the 
    installation.   Also note that loading a large ontology like the
    Gene Ontology will take several minutes (perhaps as long as an hour).

    At the time of this release, DBIx::DBStag is printing an error 
    when loading some ontologies like this:

DBD::Pg::db do failed: ERROR:  duplicate key violates unique constraint
"cvterm_c1"
DBD::Pg::db do failed: ERROR:  duplicate key violates unique constraint
"cvterm_c1"

    It doesn't appear to affect the operation the database though.

    Note that since `make ontologies` downloads ontology files from their
    online repositories, this step is prone to failure due to network
    problems.  If you already have desired ontology files locally, you
    can execute a command for each file to load it.  Note again that
    the Relationship Ontology is required before all others, and the
    the Sequence Ontology (SO) is absolutely required for proper
    functioning of the database.  The command to load an ontology is
    this:

        go2fmt.pl -p obo_text -w xml /path/to/obofile | \
            go-apply-xslt oboxml_to_chadoxml - > obo_text.xml

    to create a chadoxml file of the obo file, and then execute:

        stag-storenode.pl \
     -d 'dbi:Pg:dbname=$CHADO_DB_NAME;host=$CHADO_DB_HOST;port=$CHADO_DB_PORT' \
     --user $CHADO_DB_USERNAME --password $CHADO_DB_PASSWORD obo_text.xml

    If you have other ontology format files, the commands are similar;
    consult the documentation for go2fmt.pl and go-apply-xslt for your
    file format.

    It is not a bad idea at this point to make a back up of the database,
    particularly if you loaded a large ontology like GO.  To make a complete
    dump of the database, issue this command:

        $ pg_dump <database name>  >   <ontologies only sql filename>

    and to restore the database, issue this command:

        $ psql <database name>     <   <ontologies only sql filename>


With that, the installation of the schema is complete.  The easiest way
to load data into the database is to use a GFF3 file and the script
gmod_bulk_load_gff3.pl.  A nice set of sample data is the GFF3 file prepared
by the nice folks at the Saccraromyces Genome Database, at

    ftp://ftp.yeastgenome.org/pub/yeast/data_download/chromosomal_feature/saccharomyces_cerevisiae.gff

This file contains gene ontology (GO) anotations, so if you didn't load
GO when you executed `make ontologies`, you will get many warning messages
about being unable to find entries in the dbxref table.  If you want to
load GO now, you can execute `make ontologies` and select 'Gene Ontology'
for installation.

Then execute gmod_bulk_load_gff3.pl: 

    gmod_bulk_load_gff3.pl --organism yeast \
                           --gfffile saccharomyces_cerevisiae.gff

    (note that the '\' is included to allow cutting and pasting to a unix
    command line.)
    This loads the GFF3 file.  The loading script requires GFF3 as it has
    tighter control of the syntax and requires the use of a controlled
    vocabulary (from Sequence Ontology Feature Annotation (SOFA)), allowing
    mapping to the relational schema.  In addition to supplying the location
    of the file with the --gfffile flag, the --orgainism tag uses the common
    name from the organism table.  See `perldoc gmod_bulk_load_gff.pl` for
    more information on adding other organisms and databases, as well as
    other available commandline flags.

    GFF3 can also be generated via a script provided with bioperl,
    bp_genbank2gff.pl:

        $ bp_genbank2gff.pl --stdout --file <genbank file> > <gff file>

    Note the redirection of standard out.  Note that this method
    for generating GFF3 files is not completely satisfactory and
    development is ongoing to provide better translation.

Note that gmod_load_gff3.pl is also available, but is limited in how
much it has been supported and in how flexible it currently is.  It is
a good example of how to write code using Class::DBI classes that are 
created at the time of install.  For more information on using these
classes, see http://sourceforge.net/projects/gmod-ware for a Class::DBI
based middleware/API.

GENERIC GENOME BROWSER

Finally, to browse the data in chado, install the Generic Genome Browser,
GBrowse.  To do this execute the following commands (substituting the
version number for the 'x's):

    $ tar -zxvf Generic-Genome-Browser-x.xx.tar.gz
    $ cd Generic-Genome-Browser-x.xx
    and follow the instruction in the INSTALL documentation.

After installing GBrowse, go to 

  http://localhost/gbrowse/docs/pod/README-chado.html

for more information on configuring GBrowse to work with chado.


CUSTOM DATABASE SCHEMAS

If you answered 'No' to the question about doing a simple install
during `perl Makefile.PL`, you must provide the files default_schema.sql
and default_nofuncs.sql.  The best way to create these files is using
bin/chado-build-schema.pl, a perl script with a graphical user interface
for interactively building a Chado schema.  If you are providing table
definitions of your own, you will also have to edit the file 
chado-module-metadata.xml to define how your tables relate to other
tables in the Chado schema.  While there is no documentation of the ddt
of this file, it is relatively straight forward.  See README.AutoDBI
for more information on how chado-build-schema.pl relates to the build 
process.  Once the default_schema.sql and default_nofuncs.sql files 
are in place and you run `perl Makefile.PL`, the only difference between
the simple and non-simple installs is that the non-simple install will
build AutoDBI.pm using SQL::Translator, which will take several minutes
typically.

