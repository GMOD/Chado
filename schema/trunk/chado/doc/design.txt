[these are notes from the original chado design retreat - things have
changed a LOT since then!!! cjm@fruitfly.org]

IDB DESIGN
----------

OVERVIEW
========

IDB is a database schema designed to integrate all data in flybase
into fully normalized tables.

* Modular approach

We organised the tables into distinct modular components with tightly
defined dependencies. This is recogised as good software engineering
practice, it allows different software components to focus on the
specific data compartments required. It allows for extensibility and
schema evolution within specific modules without disrupting the rest
of the schema. Finally, it allows for a mix and match approach - it is
the authors' hope that the schema modules will be adopted by other
model organism and bioinformatics groups; these groups may want to
swap in their own table variants within specific modules, or add
modules of their own.

The actual modules used are outlined below; full documentation on each
module can be found within that particular module directory.

general      - General/Core
cv           - Controlled Vocabularies / Ontologies
pub          - Publications / Biblio / References
organism     - Data related to taxonomy / species
sequence     - Anything related to biological sequences and annotation
genetics     - Alleles, and relationships between alleles and phenotypes
map          - any kind of localisation excluding sequence locations
expression   - Transcription events, including space/time localisation
               Also for protein expression
companalysis - adjunct to sequence module for in-silico analyses

Other modules anticipated, but not yet incorporated:

comparative  - extension to sequence module for any inter or intra
               species comparisons at any level (eg synteny, peptide)
workflow     - LIMs and analysis pipeline tracking, task management

We also anticipate the need for an audit module; this is regarded as a
dbadmin issue, largely orthogonal to the rest of the schema design. We
anticipate the use of shadow/audit tables, filled using database
triggers. The design of this is not discussed here.


* Integration of genetic data with sequence and annotation data

This was the primary challenge in the design, as the structures chosen
here underpin much of the rest of the database.

Traditionally, in genome annotation databases, the central entities
are "sequence features" localised to coordinates on a sequence (DNA,
mRNA or peptide). These features are generally typed according to
their biological class, e.g. "transcript", "exon". The types include,
but are not restricted to, some or all of the biological entities that
constitute a "gene".

With genetic data, the fundamental concepts are "gene" and "allele",
with a gene being a collection of alleles; each allele represents a
specific variant of a gene in a particular instance of an organism, or
organism strain. The concept of gene is further defined by
complementation [..].

In order to unify these views, it is useful to observe that genome
annotation data deals with individual instances of the biological
entities in question. A gene model (being a collection of biological
entities defined by sequence coordinates) is always for a particular
instance of a gene; this instance corresponds to a single allele,
which is usually wild-type (there may be reasons for instantiiating non
wild-type gene models in an annotation database, discussed later,
though this is not the norm). While there is a direct one to one
correspondence between a gene model and an allele, one should be
careful to distinguish these two entities. It is incorrect to speak of
an 'allele model'.

We thus came up with three distinct entities/tables: feature, allele
and gene. the only data attached directly to genes are naming/tracking
tables. The non-genetic biological data is always attached to
features. Typical biological data would be cytological localisations
or other maps, GO terms, expression data. The kind of feature used is
dependent on the data. For instance, GO terms naturally apply to
products/proteins, but they may be attached to features of type "gene"
if the exact product is not known. expression data may be attached to
features of type transcript, or type gene. Realise that by attaching
the biological data to the feature, we are anchoring it to a specific
instance of the gene model, most typically corresponding to the
wild-type allele. This is correct, in the authors' view, as when one
talks of for instance "the function of dpp" one typically means "the
wild-type function of dpp". We humans are adept at determining meaning
by subtly distinct contexts, computers are not, hence the need to
labour this distinction.

Genetic data (eg observations on how alleles cause phenotypes, or how
combinations/interactions of alleles affect phenotypes) are typically
attached to the allele table, although the feature table may also be
used (for instance, aberration features that do not disrupt genes have
no allele, yet they may be important for genetic data).

More documentation on both feature data and genetic/phenotype data can
be found in the relevant "sequence" and "genetics" module directories.
