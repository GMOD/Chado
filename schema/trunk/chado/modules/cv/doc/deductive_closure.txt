DEDUCTIVE CLOSURE
=================

The cvtermpath table is for calculating the deductive closure of
a relation. This document describes what a deductive closure is

Asserted links
--------------

Normal (direct, asserted) relationships are stored in the
cvterm_relationship table. A entry in this table represents a
link L over some relation R

 L = Subj R Obj

For example

 "cardioblast" OBO_REL:derives_from "mesodermal cell"

In addition to these *asserted* links, we want to be able to *deduce*
links between terms. 

Transitivity of is_a
--------------------

The relation "is_a" represents a special kind of relationship
- subsumption, or inheritance.

See
http://obo.sourceforge.net/relationship#OBO_REL:is_a

If X is_a Y and Y is_a Z then it follows that X is_a Z (by
transitivity).

We write this as

 X is_a Z <= X is_a Y, Y is_a Z

The left hand side is called the *consequent*, the right hand side the
*antecedent*

For example, assume the following is_a hierarchy:

     CL:0000125 glial cell
      CL:0000243 glial cell (sensu Vertebrata)
       CL:0000126 macroglial cell
        CL:0000127 astrocyte ***              

If follows from this that an astrocyte is_a glial cell (deduced by
transitivity)

Reflexivity of is_a
-------------------

The is_a relation is reflexive; see
http://obo.sourceforge.net/relationship#OBO_REL:is_a

We write this as:

 X is_a X

This may seem odd, but it comes in useful both for doing queries and
for deriving future rules

Transitivity of other relations
-------------------------------

Many other relations, such as part_of are also transitive.

If R is a transitive relation, then we can say

 X R Z <= X R Y, Y R Z

For example, assume we have the following 3 develops_from links, and
develops_from is a transitive relation:

  neurectodermal cell <- glioblast <- glial cell      

Then it follows that glial cells develop from neurectodermal cells

Transitivity over is_a
----------------------

It can be proved from the definition of is_a (proof not shown here)
that

  X R Z <= X is_a Y, Y R Z

and

  X R Z <= X R Y, Y is_a Z

This can be thought of as "inheritance"

For example, if an astrocyte is_a glial cell and a glial cell
develops_from a glioblast, then it follows that astrocytes
develop_from glioblasts.

Or, more formally, rewriting this using the definitions from the OBO
Relations ontology:

- All astrocytes are glial cells
- All glial cells develop_from some glioblast
- Therefore all astrocytes develop_from some glioblast

Difference between deductive closure and transitive closure
-----------------------------------------------------------

With a transitive closure we simply follow all links in the DAG,
ignoring the relationship type. This works fine for ontologies such as
GO that have only is_a and part_of, but is not ideal for other
ontologies such as anatomical ontologies.

First of all, it may be possible for the closure to grow in size
explosively

Second of all, a closure that ignores the relations may be
meaningless. It is also less useful for queries. For example, we may
want to query for genes expressed in the larva or part of the larva,
but not genes expressed in anatomical entites that develop from the
larva

Populating cvtermpath
---------------------

The rules above should be used for populating cvtermpath

Currently there are different options for populating this table:

- Use the functions in cv/functions/deductive_closure.sqlapi

  (note: you can also use the functions here to dynamically calculate
the dedutive closure)

- Use go-db-perl [NOT YET IMPLEMENTED]

- Use oboedit [BACKEND NOT YET IMPLEMENTED]

Additional rules
----------------

The rules above are not complete but should be sufficient for existing
OBO ontologies

Future rules anticipated include rules that take into account
sub-relations (ie subtyping of relationship types), and rules that
take into account the fact that some relations may be transitive over
other relations (for example, develops_from may be transitive over
part_of)

Relationship to semantic web technologies
-----------------------------------------

It is not necessary to be aware of semantic web technologies and
standards such as OWL, reasoners and so on in order to understand this
document. Readers who are familiar with these technologies will notice
the overlap, and will be aware that standard reasoners and rule
engines could be used to implement the rules above.
