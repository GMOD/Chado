
---return a set of feature but only feature_id is valid and rest of fields are null

CREATE OR REPLACE FUNCTION get_children_feature_id(INTEGER) RETURNS SETOF feature AS
'
DECLARE
    parentid alias for $1;
    pcount integer := 1;
    cfeature feature%ROWTYPE;
BEGIN
    CREATE TEMP TABLE tmpparent (feature_id INTEGER, status INTEGER DEFAULT 0);
    EXECUTE ''INSERT INTO tmpparent VALUES('' || parentid || '', 0);'';
    WHILE (pcount > 0) LOOP
        -- get all children
        FOR cfeature IN EXECUTE ''SELECT fr.subject_id as feature_id FROM feature_relationship fr, tmpparent p WHERE p.feature_id = fr.object_id AND status = 0;'' LOOP
            RETURN NEXT cfeature;
        END LOOP;

        EXECUTE ''UPDATE tmpparent SET status = 1 WHERE status = 0;'';
        EXECUTE ''INSERT INTO tmpparent SELECT DISTINCT fr.subject_id, 0 FROM feature_relationship fr, tmpparent p WHERE fr.object_id = p.feature_id AND p.status = 1;'';
        -- set status to indicate parents are done
        EXECUTE ''UPDATE tmpparent SET status = 2 WHERE status = 1;'';
        EXECUTE ''SELECT * FROM tmpparent WHERE status = 0;'';
        GET DIAGNOSTICS pcount = ROW_COUNT;
    END LOOP;

    DROP TABLE tmpparent;
    RETURN;
END;   
'
LANGUAGE 'plpgsql';
