
Below is an email that describes how FlyBase is currently loading
ontologies into Chado.

Josh,

We use go-perl to convert the .obo to chadoxml. The go-perl module is
written by Chris Mungall. 

http://search.cpan.org/~cmungall/

The flybase_controlled_vocabulary needed a workaround for 1 tag but I
did that in the xsl. 

We use go-perl Parser.pm methods and perlDBI to generate the reports
mentioned below.

Here's our SOP for updating.

Compare CV/CVterms in chado with the new *.obo data and generate reports
on changed ontology terms, only reporting on cvterms that have been
referenced in the data. 
              * report 1: terms to be obsoleted, including 
                      * a. terms newly labeled obsolete in the *.obo
                        data
                      * b. terms in chado that are no longer present in
                        *.obo
              * report 2: terms with the same dbxref ID but changed
                names
              * report 3: terms with the same dbxref ID but changed
                definitions
              * report 4: terms with the same name but changed dbxref ID
                Get back from curators tables for bulk updates of linked
                data resulted from the cv changes.
                
                Confirm with curators on the cases of straight updates
                of cvterm.name, and/or cvterm.definition.
                
                Confirm with curators that the remaining individual data
                changes will be effected by proforma loading.
                
      * Item 3 (for all updates) 
              * Item 3.1 drop constraint cvterm_c1_unique unique btree
                (name, cv_id, is_obsolete)
              * Item 3.2 delete the existing cvterm_relationship,
                cvterm_dbxref, cvtermprop and cvtermsynonym records for
                any cvterm whose accession (cvterm.dbxref_id) is present
                in the new .obo data.
              * Item 3.3 convert the new .obo into chadoxml, load the
                chadoxml via XORT, having dbxref_id as the unique key.
              * Item 3.4 check for duplicate current cvterm pairs that
                have the same cv_id and cvterm.name but different
                dbxref_id's, obsolete the old one.
              * Item 3.5 add back constraint cvterm_c1_unique unique
                btree (name, cv_id, is_obsolete)
      * Item 4 (for all updates) execute the bulk updates in chado.
        custom scripts are needed for different types of data updates.

obsoleted terms:
     1. compare cvterms in chado with *.obo files from Cambridge to
        identify chado cvterms that are no longer existing and may need
        to be obsoleted.
     2. generate reports from chado on cvterms to be obsoleted and data
        attached, get confirmation from curators.
     3. in chado, obsolete the confirmed cvterms.

updated terms:
     1. convert *.obo to chadoxml using go2chadoxml
     2. load in the chadoxml data from above into Chado
     3. report duplicate cvterms in cvterm table, consult curators to
        confirm the old term has been updated to the new one
     4. merge data attached to the old cvterm into the new one.
     5. obsolete the old cvterm
     6. Update phenotype.uniquename where component cvterm.name has
        changed.

new terms:
        get inserted when loading the chadoxml data converted from the
        new *.obo data. no problems!
        

Cheers,

Kathleen
                