<opt
  name="bulkfiles"
  relid="1"
  date="20071014"
  make_current="1"
  >
  
  <title>Chado DB Data Release</title>
  
  <about id="bulkfiles_template"><![CDATA[
    This is an example main configuration file for GMODTools bulkfiles
    generator.  The concept is that each database release uses
    specific database, release ids, dates, names, but a common
    set of other configurations.
 
    This file has the main settings, and includes other settings.
    Create a new one for each data release, and customize.
    
    Main tags:
    relid = required, to match <release id=xxx> setting with release details.
    date, name = optional information.
    make_current = 1
      will make $datadir/$species/'current' symlink to this release folder.
  ]]></about>

  <about id="xml_configurations"><![CDATA[
    The structure of these configurations is as per Perl module
    XML::Simple configurations. These include
    SIMPLE values: key="value"
    ARRAY values are repeated 
      <key>value1</key>
      <key>value2</key>
    HASH values have an id or name tag, are repeated and include any substructure:
      <key id="1" tag1="bob>
        <array>one</array><array>two</array>
      </key>
      <key id="2" tag1="jill">
        <array>ten</array><array>twenty</array>
      </key>
      
    There are many of these configurations.  Documentation of them
    is included, sparely as yet, in the configuration files (about tags).
    
    for full listing, run 
      bulkfiles.pl -config=bulkfiles_template -showconfig -debug 
  ]]></about>
  
  
  <include>site_defaults</include>
  
  <about id="include">
    Using 'include' options in the xml configurations will
    add these file settings to main configuration, but not replace main
    settings.  Includes can be nested.
    
    'site_defaults' is one which is handy for including all the
    common settings your site uses for data releases.
  </about>
  

  <release id="1" dbname="chado1"  date="20040519" />
  <release id="2" dbname="chado2"  date="20051020" />
  <relfull>${org}_${release_date}</relfull> <!-- or ${org}_release${release_id} -->
  <release_url>/genome/${species}/release${release_id}.html</release_url>

  <about id="release"><![CDATA[
    release tags (an ARRAY) will specify release info:
      id= number matching 'relid' above
      rel= release tag appended to output files
      date= release date
      relful= full release name, used as folder name
      dbname=chado database name; replaces site default db name= tag 
      release_url = url to some document on release info
  ]]></about>
  

  <valid>0</valid> 
  <about id="valid">
  Set valid=1 to skip seq_ontology, other variable validation
  </about>
  
  <seq_ontology>sequence</seq_ontology>
  
  <about id="seq_ontology">
    seq_ontology is the name in CV table for the
    sequence feature cvterm set, including gene, exon,
    chromosome.  It varies depending on choices used to
    install sequence CV terms in your Chado database.
    'seq_ontology' and 'golden_path' are critical parameters
    that must match cvterm values used for feature entries. 
    See chadofeatsql.xml for more details.
    Common alternate values are 'sequence', 
    'Sequence Ontology Feature Annotation', 'SO', 'SOFA'.
  </about>

  <!-- see organisms.xml; add your species there -->
  <org>scer</org>
  <species>Saccharomyces_cerevisiae</species>
  <taxon>0000</taxon> <!-- 0710: for go_association table ; add to org.table -->
  
  <!-- see chadofeatsql ENV_default -->
  <golden_path>'chromosome','supercontig'</golden_path>

  <featureprops>'Note','orf_classification'</featureprops>
  
  <about id="species-genome">
    These values of org, species,golden_path,featureprops 
    are example species-genome specific options.
    org = short species id.
    golden_path = what highest level of genome feature is (a SO term), 
    chromosome, chromosome_arm, golden_path are some common ones.
    featureprops = chado featureprops to include with feature dump.
  </about>

  <!-- 0710: this removes per-chromosome/scaffold/. files, not desired but for
        well assembled genomes -->
  <no_csomesplit>1</no_csomesplit>

  <featdump
    path="tmp/featdump/\w+.tsv"
    config="chadofeatsql"
    tag="feature_sql"
    type="feature_table"
    splitname="chadofeat"
    >
    <target>chromosomes</target>
    <target>features</target>
    <target>matches</target> 
    <target>analysis</target>  
  </featdump>

  <about id="featdump">
    This specifies the primary chado database feature dump, including
    which table sections in the chadofeatsql.xml configuration
    to use.  Each target here matches a chado feature SQL entry in chadofeatsql.
    
    This should become a 'fileset' instead of 'featdump'.
  </about>

  <fileset_override
    name="fff"
    path="fff/.+\.fff"
    input="feature_table"
    title="Genome features"
    config="sgdfeatconf"
    handler="FeatureWriter"
    dogzip="0"
    />
  <fileset_override id="dummy" title="placeholder for xmlsimple"/>

  <about id="fileset_override">
    fileset hash table defines what bulk files to produce, and how.
    fileset.xml has default settings, this fileset_override replaces
    just one of these. The  name="fff" is a conversion of chado 
    feature dump to a 'gff-like' table, using database-specific
    feature conversions, so it typically needs attention for a new 
    site/database.
  </about>

  
</opt>
